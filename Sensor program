// (c) Michael Schoeffler 2017, http://www.mschoeffler.de
#include "Wire.h" // This library allows you to communicate with I2C devices.
#include <SPI.h>
#include <Ethernet.h>
#include "I2Cdev.h"
#include "MPU6050.h"
MPU6050 mpu;


byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
IPAddress ip(192, 168, 1, 177);
EthernetServer server(80);
const int MPU_ADDR = 0x68; // I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.
int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data
int16_t gyro_x, gyro_y, gyro_z; // variables for gyro raw data
int16_t temperature; // variables for temperature data
char tmp_str[7]; // temporary variable used in convert function
char* convert_int16_to_str(int16_t i) { // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.
  sprintf(tmp_str, "%6d", i);
  return tmp_str;
}
  int16_t accelerometer_x_list[20];
  int16_t accelerometer_y_list[20];
  int16_t accelerometer_z_list[20];
  int16_t temperature_list[20];
  int16_t gyro_x_list[20];
  int16_t gyro_y_list[20];
  int16_t gyro_z_list[20];


 
  
   
void setup() {
   Serial.begin(9600);
  Wire.begin();
  Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B); // PWR_MGMT_1 register
  Wire.write(0); // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
  Ethernet.begin(mac);
  while (!Serial) {
    ; // wait for the serial port to connect. Needed for native USB port only
  }
  Serial.println("Ethernet WebServer Example");


  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);


  // Check for Ethernet hardware present
  if (Ethernet.hardwareStatus() == EthernetNoHardware) {
    Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
    while (true) {
      delay(1); // do nothing, no point running without Ethernet hardware
    }
  }
  if (Ethernet.linkStatus() == LinkOFF) {
    Serial.println("Ethernet cable is not connected.");
  }


  // start the server
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
  for(int i=0; i<20; i++){
  accelerometer_x_list[i]= 0;
  accelerometer_y_list[i]= 0;
  accelerometer_z_list[i]= 0;
  temperature_list[i]= 0;
  gyro_x_list[i]= 0;
  gyro_y_list[i]= 0;
  gyro_z_list[i]= 0;
  }


  mpu.setXGyroOffset(21);
  mpu.setYGyroOffset(-16);
  mpu.setZGyroOffset(-30);
  mpu.setXAccelOffset(-4711);
  mpu.setYAccelOffset(1547);
  mpu.setZAccelOffset(3593);


}
void loop() {
  float average_accelerometer_x = 0;
  float average_accelerometer_y = 0;
  float average_accelerometer_z = 0;
  float average_temperature = 0;
  float average_gyro_x = 0;
  float average_gyro_y = 0;
  float average_gyro_z = 0;
  for(int readIndex = 0; readIndex<20; readIndex++){ 
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x_list[readIndex] = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y_list[readIndex] = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z_list[readIndex] = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
  temperature_list[readIndex] = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
  gyro_x_list[readIndex] = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
  gyro_y_list[readIndex]= Wire.read()<<8 | Wire.read(); // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
  gyro_z_list[readIndex] = Wire.read()<<8 | Wire.read(); // reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)
   
    average_accelerometer_x = average_accelerometer_x + fabs(accelerometer_x_list[readIndex]/20.0);
    average_accelerometer_y = average_accelerometer_y + fabs(accelerometer_y_list[readIndex]/20.0);
    average_accelerometer_z = average_accelerometer_z + fabs(accelerometer_z_list[readIndex]/20.0);
    average_temperature = average_temperature+ (temperature_list[readIndex]/20.0);
    average_gyro_x = average_gyro_x + fabs(gyro_x_list[readIndex]/20.0);
    average_gyro_y = average_gyro_y+fabs(gyro_y_list[readIndex]/20.0);
    average_gyro_z = average_gyro_z + fabs(gyro_z_list[readIndex]/20.0);
    delay(30);
  }


  EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          // add a meta refresh tag, so the browser pulls again every 5 seconds:
          client.println("<meta http-equiv=\"refresh\" content=\"10\">");
          // output the value of each analog input pin
          for(int i=0; i<20; i++){
            Serial.print(convert_int16_to_str(accelerometer_x_list[i]));
            Serial.print('\n');
            
          }
    Serial.print("aX = "); Serial.print(convert_int16_to_str(average_accelerometer_x));
    Serial.print(" | aY = "); Serial.print(convert_int16_to_str(average_accelerometer_y));
    Serial.print(" | aZ = "); Serial.print(convert_int16_to_str(average_accelerometer_z));
    // the following equation was taken from the documentation [MPU-6000/MPU-6050 Register Map and Description, p.30]
    Serial.print(" | tmp = "); Serial.print(average_temperature/340.00+36.53);
    Serial.print(" | gX = "); Serial.print(convert_int16_to_str(average_gyro_x));
    Serial.print(" | gY = "); Serial.print(convert_int16_to_str(average_gyro_y));
    Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(average_gyro_z));
    Serial.println();
          for(int readIndex =0; readIndex <20; readIndex++){
            client.print(convert_int16_to_str(accelerometer_x_list[readIndex]));
            client.print('\n');
          }
          client.print('\n');
            client.print("| aX = "); client.print(convert_int16_to_str(average_accelerometer_x)); client.print('\n');
            client.print(" | aY = "); client.print(convert_int16_to_str(average_accelerometer_y));client.print('\n');
            client.print(" | aZ = "); client.print(convert_int16_to_str(average_accelerometer_z));client.print('\n');
            // the following equation was taken from the documentation [MPU-6000/MPU-6050 Register Map and Description, p.30]
            client.print(" | tmp = "); client.print(average_temperature/340.00+36.53);client.print('\n');
            client.print(" | gX = "); client.print(convert_int16_to_str(average_gyro_x));client.print('\n');
            client.print(" | gY = "); client.print(convert_int16_to_str(average_gyro_y)); client.print("                                   ");
            client.print(" | gZ = "); client.print(convert_int16_to_str(average_gyro_z));client.print('\n');
            client.println();
            client.println("<br />");       
          client.println("</html>");
          break;
      }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
  }
}
